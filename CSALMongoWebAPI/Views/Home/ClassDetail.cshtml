@using CSALMongo.Model
@using CSALMongoWebAPI.Util
@using Newtonsoft.Json;

@{
    ViewBag.Title = "Class " + Model.Class.ClassID;
    var meetingTime = Model.Class.MeetingTime;
    if (String.IsNullOrWhiteSpace(meetingTime)) {
        meetingTime = "?";
    }
}


<!-- MAIN CONTENT -->
<div class="container-fluid">
    <div class="row">        
        <div class="col-md-4">
            <table class="table table-condensed table-bordered">
                <tr><th>Meeting Time</th><td>@meetingTime</td></tr>
                <tr><th>Students</th><td>@Model.Class.Students.Count</td></tr>
                <tr><th>Lessons</th><td>@Model.Class.Lessons.Count</td></tr>
            </table>
        </div>
        
        <div class="col-md-4">
            <table class="table table-condensed table-bordered">
                <tr><th>Location</th><td>@Model.Class.Location</td></tr>
                <tr><th>Teacher(s)</th><td>@Model.Class.TeacherName</td></tr>
            </table>
        </div>

        <div class="col-md-4">
            <p>Please note that averages are based on the students'
            <em>last</em> attempt on a lesson. You may examine all
            attempts a student has made by clicking on a score.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <style>
                .matrixCell {
                    min-width: 32px;
                    width: auto;
                }
            </style>

            <hr />

            <h3>Lesson Breakdown</h3>

            <table class="table table-condensed" id="classMatrix">
                <tr>
                    <th class="nw matrixCell"><i>Lesson</i></th>
                    <th class="nw matrixCell"><i>Class Avg</i></th>
                    @foreach (var userID in Model.Class.Students) {
                        <th class="nw matrixCell">
                            <a href="~/home/studentdetails/@RenderHelp.URIEncode(userID)" class="student-link">@userID</a>
                        </th>
                    }
                </tr>

                @foreach (var lessonID in Model.Class.Lessons) {
                    string lessonName;
                    if (!Model.LessonNames.TryGetValue(lessonID, out lessonName)) {
                        lessonName = lessonID;
                    }

                    string correctDisp = "";

                    Tuple<int, int> tots = Model.LessonCounts[lessonID];
                    if (tots.Item1 > 0 || tots.Item2 > 0) {
                        double all = tots.Item1 + tots.Item2;
                        double avg = (double)tots.Item1 / all;
                        correctDisp = avg.ToString();
                    }

                    var lessonUrl = RenderHelp.URIEncode(lessonID);

                    <tr>
                        <th class="nw">
                            <a href="~/home/lessondetails/@lessonUrl" class="lesson-link">@lessonName</a>
                        </th>

                        <th class="correct-cell nw">@correctDisp</th>

                        @foreach (var userID in Model.Class.Students) {
                            var userUrl = RenderHelp.URIEncode(userID);

                            string correctRateDisp = "";
                            string showCompleted = "";

                            var key = new Tuple<string, string>(lessonID, userID);
                            StudentLessonActs turns = null;

                            if (Model.LUTurns.TryGetValue(key, out turns)) {
                                correctRateDisp = turns.CorrectAnswerRate().ToString();
                                showCompleted = turns.LastCompleted() ? "yes" : "";
                            }

                            <td class="nw border1 correct-cell det-link" data-completed="@showCompleted" data-user="@userUrl" data-lesson="@lessonUrl">
                                @correctRateDisp
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>

    <div class="row">        
        <div class="col-md-12">
            <h3>Students</h3>
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>SubjID</th>
                        <th class="nw">Lesson Avg</th>
                        <th class="nw">Lesson Performance</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var userID in Model.Class.Students) {
                        string correctDisp = "";
                        
                        Tuple<int, int> tots = Model.StudentCounts[userID];
                        if (tots.Item1 > 0 || tots.Item2 > 0) {
                            double all = tots.Item1 + tots.Item2;
                            double avg = (double)tots.Item1 / all;
                            correctDisp = avg.ToString();
                        }

                        var scores = new List<string>();
                        foreach (string lessonID in Model.Class.Lessons) {
                            var lukey = new Tuple<string, string>(lessonID, userID);
                            string score = "0.0";
                            StudentLessonActs turns;
                            if (Model.LUTurns.TryGetValue(lukey, out turns)) {
                                if (turns.CorrectAnswers + turns.IncorrectAnswers > 0) {
                                    //We have a rate - we center it at 0.67 and scale it for display
                                    double rate = turns.CorrectAnswerRate();
                                    if (rate >= 0.67) {
                                        rate = ((rate - 0.67) / 0.33) * 100.0;
                                    }
                                    else {
                                        rate = ((rate - 0.67) / 0.67) * 100.0;
                                    }
                                    score = rate.ToString();
                                }
                            }
                            scores.Add(score);
                        }
                        
                        <tr>
                            <td><a href="~/home/studentdetails/@RenderHelp.URIEncode(userID)" class="student-link">@userID</a></td>
                            <td class="correct-cell">@correctDisp</td>
                            <td><span class="studentSparkLine"> @String.Join(",", scores)</span></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div> <!-- /container -->

<!-- Style fixing for jQuery sparklines with Bootstrap 3 -->
<style>
    .jqstooltip {
        -webkit-box-sizing: content-box;
        -moz-box-sizing: content-box;
        box-sizing: content-box;
    }
</style>

@section ScriptFinal {
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery-sparklines/2.1.2/jquery.sparkline.min.js" type="text/javascript"></script>

<script>
    @{
        var LessonNames = new List<String>();
        foreach (var lid in Model.Class.Lessons) {
            string lessonName;
            if (!Model.LessonNames.TryGetValue(lid, out lessonName)) {
                lessonName = lid;
            }
            LessonNames.Add(lessonName);
        }
    }
    var LESSON_LIST = @Html.Raw(Json.Encode(LessonNames))
</script>

<script>
    function sparkTipFormatter(sparkline, options, fields) {
        var num = 0.0;

        var field = null;
        if (fields && !!fields.length && fields.length > 0) {
            field = fields[0];
        }
        if (field != null && field["isNull"] === false) {
            num = CSALCommon.safeParseFloat(field["value"], 0.0);
        }

        var lessonName = "";
        try {
            var lessonIdx = CSALCommon.safeParseInt(field["offset"], -1);
            if (lessonIdx >= 0 && lessonIdx < LESSON_LIST.length) {
                lessonName = LESSON_LIST[lessonIdx];
            }
        }
        catch(e) {
            lessonName = "";
            console.log("Bad lesson name - error is:" + e);
        }
        if (lessonName != "") {
            lessonName = "[" + lessonName + "] ";
        }

        if (isNaN(num) || Math.abs(num - 0.0) < 0.000001) {
            return lessonName + "Nothing to score";
        }

        var comment = "";
        if (num > 0.0) {
            //MUST REVERSE ((rate - 0.67) / 0.33) * 100.0;
            num = ((num / 100.0) * 0.33) + 0.67;
            comment = "Passing";
        }
        else {
            //MUST REVERSE ((rate - 0.67) / 0.67) * 100.0;
            num = ((num / 100.0) * 0.67) + 0.67;
            comment = "Having Trouble";
        }

        var txt = lessonName + CSALCommon.trimmedStr(Math.round(num * 100.0)) + "% (" + comment + ")";

        return $("<div></div>").addClass("jqstooltip").html(txt).html();
    }

    $(document).ready(function () {
        $(".student-link").addClass("hover-restore");
        $(".lesson-link").addClass("hover-restore");

        $(".studentSparkLine").sparkline("html", {
            type: "bar",
            height: "38px",
            chartRangeMin: -101.0,
            chartRangeMax: 101.0,
            barColor: "#93c54b",
            negBarColor: "#d9534f",
            zeroColor: "#000000",
            barWidth: 20,
            barSpacing: 4,
            zeroAxis: true,
            disableTooltips: false,
            tooltipFormatter: sparkTipFormatter
        });

        $(".correct-cell").each(function (idx, ele) {
            var td = $(ele);
            var correct = td.text();
            var newCorrect = CSALCommon.correctRateMarkup(correct);
            var target = td.html("").append(newCorrect);

            var completed = td.data("completed");
            if (completed && completed === "yes") {
                target.append($("<span></span>").addClass("glyphicon glyphicon-ok"));
            }
        });

        $(".det-link").addClass("hover-restore").click(function (evt) {
            evt.preventDefault();
            var t = $(this);
            showTurnDetail(t.data("lesson"), t.data("user"));
        });
    });
</script>
}
