@using CSALMongo.Model
@using CSALMongoWebAPI.Util

@{
    ViewBag.Title = "Class " + Model.Class.ClassID;
}


<!-- MAIN CONTENT -->
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="pull-left">
                <p>Location: @Model.Class.Location</p>
                <p>Teacher: @Model.Class.TeacherName</p>
            </div>

            <div class="pull-left" style="margin-left: 32px;">
                @if (!String.IsNullOrWhiteSpace(Model.Class.MeetingTime)) {
                    <p>Meeting Time: @Model.Class.MeetingTime</p>
                }

                <p>
                    This class has <strong>@Model.Class.Students.Count</strong> students
                    and <strong>@Model.Class.Lessons.Count</strong> lessons
                </p>
            </div>

            <div class="clearfix">
            </div>
        </div>
    </div>

    <div class="row">        
        <div class="col-md-12">
            <h3>Students</h3>
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>SubjID</th>
                        <th class="nw">Lesson Avg</th>
                        <th class="nw">Lesson Performance</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var userID in Model.Class.Students) {
                        string correctDisp = "";
                        string correctStyle = "";
                        
                        Tuple<int, int> tots = Model.StudentCounts[userID];
                        if (tots.Item1 > 0 || tots.Item2 > 0) {
                            double all = tots.Item1 + tots.Item2;
                            double avg = (double)tots.Item1 / all;
                            correctDisp = String.Format("{0:P0}", avg);
                            correctStyle = avg > 0.67 ? "label-success" : "label-danger";
                        }

                        var scores = new List<string>();
                        foreach (string lessonID in Model.Class.Lessons) {
                            var lukey = new Tuple<string, string>(lessonID, userID);
                            string score = "0.0";
                            StudentLessonActs turns;
                            if (Model.LUTurns.TryGetValue(lukey, out turns)) {
                                if (turns.CorrectAnswers + turns.IncorrectAnswers > 0) {
                                    //We have a rate - we center it at 0.67 and scale it for display
                                    double rate = turns.CorrectAnswerRate();
                                    if (rate > 0.67) {
                                        rate = ((rate - 0.67) / 0.33) * 100.0;
                                    }
                                    else {
                                        rate = ((rate - 0.67) / 0.67) * 100.0;
                                    }
                                    score = rate.ToString();
                                }
                            }
                            scores.Add(score);
                        }
                        
                        <tr>
                            <td><a href="~/home/studentdetails/@RenderHelp.URIEncode(userID)" class="student-link">@userID</a></td>
                            <td><span class="label @correctStyle" style="font-weight:normal;">@correctDisp</span></td>
                            <td><span class="studentSparkLine"> @String.Join(",", scores)</span></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <style>
                .matrixCell {
                    min-width: 32px;
                    width: auto;
                }
            </style>

            <hr/>

            <h3>Lesson Breakdown</h3>

            <table class="table table-condensed" id="classMatrix">
                <tr>
                    <th class="nw matrixCell"><i>Lesson</i></th>
                    <th class="nw matrixCell"><i>Class Avg</i></th>
                    @foreach (var userID in Model.Class.Students) {
                        <th class="nw matrixCell">
                            <a href="~/home/studentdetails/@RenderHelp.URIEncode(userID)" class="student-link">@userID</a>
                        </th>
                    }
                </tr>

                @foreach (var lessonID in Model.Class.Lessons) {
                    string lessonName;
                    if (!Model.LessonNames.TryGetValue(lessonID, out lessonName)) {
                        lessonName = lessonID;
                    }

                    string correctDisp = "";
                    string correctStyle = "";

                    Tuple<int, int> tots = Model.LessonCounts[lessonID];
                    if (tots.Item1 > 0 || tots.Item2 > 0) {
                        double all = tots.Item1 + tots.Item2;
                        double avg = (double)tots.Item1 / all;
                        correctDisp = String.Format("{0:P0}", avg);
                        correctStyle = avg > 0.67 ? "label-success" : "label-danger";
                    }
                    
                    <tr>
                        <th class="nw">
                            <a href="~/home/lessondetails/@RenderHelp.URIEncode(lessonID)" class="lesson-link">@lessonName</a>
                        </th>

                        <th class="nw">
                            <span class="label @correctStyle" style="font-weight:normal;">@correctDisp</span>
                        </th>
                        
                        @foreach (var userID in Model.Class.Students) {
                            string correctRateDisp = "";
                            string correctRateStyle = "";
                            bool showCompleted = false;
                                                
                            var key = new Tuple<string, string>(lessonID, userID);
                            StudentLessonActs turns = null;

                            if (Model.LUTurns.TryGetValue(key, out turns)) {
                                double correctRate = turns.CorrectAnswerRate();
                                correctRateDisp = String.Format("{0:P0}", correctRate);
                                correctRateStyle = correctRate > 0.67 ? "label label-success" : "label label-danger";
                                showCompleted = turns.LastCompleted();
                            }

                            <td class="nw border1">
                                <span class="@correctRateStyle" style="font-weight:normal;">@correctRateDisp</span>
                                @if (showCompleted) {
                                    <span class="glyphicon glyphicon-ok"></span>
                                }
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>
</div> <!-- /container -->

@section ScriptFinal {
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery-sparklines/2.1.2/jquery.sparkline.min.js" type="text/javascript"></script>
<script>
    $(document).ready(function () {
        $(".student-link").addClass("hover-restore");
        $(".lesson-link").addClass("hover-restore");

        $(".studentSparkLine").sparkline("html", {
            type: "bar",
            height: "38px",
            chartRangeMin: -101.0,
            chartRangeMax: 101.0,
            barColor: "#93c54b",
            negBarColor: "#d9534f",
            zeroColor: "#000000",
            barWidth: 20,
            barSpacing: 4,
            zeroAxis: true,
            disableTooltips: true
        });
    });
</script>
}
